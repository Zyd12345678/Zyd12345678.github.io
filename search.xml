<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>代码书写规范</title>
      <link href="/2025/07/19/%E4%BB%A3%E7%A0%81%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
      <url>/2025/07/19/%E4%BB%A3%E7%A0%81%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="代码书写规范"><a href="#代码书写规范" class="headerlink" title="代码书写规范"></a>代码书写规范</h1><h2 id="1-VO、PO、DTO区别"><a href="#1-VO、PO、DTO区别" class="headerlink" title="1.VO、PO、DTO区别"></a>1.VO、PO、DTO区别</h2><p>VO:返回给前端的实体</p><p>PO:对应数据库的实体</p><p>DTO:接收前端传递的实体</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>注意事项</title>
      <link href="/2025/07/19/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2025/07/19/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="1-代码层面"><a href="#1-代码层面" class="headerlink" title="1.代码层面"></a>1.代码层面</h2><p>写完代码要多看几遍，尤其是涉及到外部接口调用，写完代码要复查，上传代码之前也要检查。</p><h2 id="2-测试层面"><a href="#2-测试层面" class="headerlink" title="2.测试层面"></a>2.测试层面</h2><p>对于外部接口调用，采用postman工具测试，各种场景都要进行测试。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Swagger的使用</title>
      <link href="/2025/07/19/Swagger%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/07/19/Swagger%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Swagger的使用"><a href="#Swagger的使用" class="headerlink" title="Swagger的使用"></a>Swagger的使用</h1><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!--swagger--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>    &lt;artifactId&gt;knife4j-openapi2-spring-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;4.1.0&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="2-相关配置"><a href="#2-相关配置" class="headerlink" title="2.相关配置"></a>2.相关配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">knife4j:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">openapi:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">用户管理接口文档</span><br>    <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;用户管理接口文档&quot;</span><br>    <span class="hljs-attr">email:</span> <span class="hljs-string">zhanghuyi@itcast.cn</span><br>    <span class="hljs-attr">concat:</span> <span class="hljs-string">虎哥</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">https://www.itcast.cn</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.0.0</span><br>    <span class="hljs-attr">group:</span><br>      <span class="hljs-attr">default:</span><br>        <span class="hljs-attr">group-name:</span> <span class="hljs-string">default</span><br>        <span class="hljs-attr">api-rule:</span> <span class="hljs-string">package</span><br>        <span class="hljs-attr">api-rule-resources:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">com.itheima.mp.controller</span> <span class="hljs-comment"># controller扫描包</span><br></code></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:服务端口号/doc.html">http://localhost:服务端口号/doc.html</a></p><p>对应效果：</p><p><img src="/img/swagger.png" alt="image-20250718195430481"></p><h2 id="3-常用注解"><a href="#3-常用注解" class="headerlink" title="3.常用注解"></a>3.常用注解</h2><ol><li>@Api(tags = “用户管理接口”) 作用于Controller的上面，表明是swagger资源。这个controller中的所有接口生成的接口文档都会在tags这个list下。</li><li>@ApiModel(description=”用户实体”)作用于实体类上面如po、vo、dto。</li><li>@ApiModelProperty(“姓名”)作用于实体类字段上。</li><li>@ApiOperation(“新增用户”)作用于接口上面。</li><li>@ApiParam(“用户id”)作用于方法传参如id,或集合List<Long> ids，对象不需要加这个注解，因为对象通常都是dto已经通过@ApiModel和@ApiModelProperty注解解释字段。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码优化</title>
      <link href="/2025/07/19/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
      <url>/2025/07/19/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h1><p>需求描述：基于Restful风格实现下面的接口。</p><p><img src="/img/demond_mp_IService.png" alt="image-20250716204407391"></p><h2 id="1-我的代码"><a href="#1-我的代码" class="headerlink" title="1. 我的代码"></a>1. 我的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Api(tags = &quot;用户管理接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;新增用户&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(UserFormDTO userFormDTO)</span>&#123;<br>        <span class="hljs-comment">// 1.转换DTO为PO</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(userFormDTO.getId());<br>        user.setUsername(userFormDTO.getUsername());<br>        user.setPassword(userFormDTO.getPassword());<br>        user.setPhone(userFormDTO.getPhone());<br>        user.setInfo(userFormDTO.getInfo());<br>        user.setStatus(userFormDTO.getStatus());<br>        user.setBalance(userFormDTO.getBalance());<br>        <span class="hljs-comment">// 2.新增</span><br>        userService.save(user);<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;删除用户&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span>&#123; <br>        userService.removeById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据id查询用户&quot;)</span><br>    <span class="hljs-keyword">public</span> UserVO <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getById(id);<br>        <span class="hljs-type">UserVO</span> <span class="hljs-variable">userVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserVO</span>();<br>        userVO.setId(user.getId());<br>        userVO.setUsername(user.getUsername());<br>        userVO.setStatus(user.getStatus());<br>        userVO.setInfo(user.getInfo());<br>        userVO.setBalance(user.getBalance());<br>        <span class="hljs-keyword">return</span> userVO;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据id批量查询用户&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;UserVO&gt; <span class="hljs-title function_">listUsersByIds</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;<br>        List&lt;User&gt; users = userService.listByIds(ids);<br>        List&lt;UserVO&gt; userVOS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(User u:users)&#123;<br>            <span class="hljs-type">UserVO</span> <span class="hljs-variable">userVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserVO</span>();<br>            userVO.setId(u.getId());<br>            userVO.setUsername(u.getUsername());<br>            userVO.setStatus(u.getStatus());<br>            userVO.setInfo(u.getInfo());<br>            userVO.setBalance(u.getBalance());<br>            userVOS.add(userVO);<br>        &#125;<br>        <span class="hljs-keyword">return</span> userVOS;   <br>    &#125;<br><br>    <span class="hljs-meta">@PutMapping(&quot;/deduction&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据id扣减余额&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id,<span class="hljs-meta">@PathVariable</span> Integer money)</span>&#123;<br>        userService.deductById(id,money);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-找错"><a href="#2-找错" class="headerlink" title="2. 找错"></a>2. 找错</h2><p>一共有7处错误：</p><ol><li>新增用户方法addUser()里缺少@RequestBody注解</li><li>根据id删除用户方法deleteUserById()上的@DeleteMapping缺少(“/{id}”)路径。</li><li>根据id删除用户方法deleteUserById()里的@PathVariable缺少(“id”)</li><li>根据id查询用户方法getUserById()上的@DeleteMapping缺少(“/{id}”)路径。</li><li>根据id查询用户方法getUserById()里的@PathVariable缺少(“id”)</li><li>根据id扣减余额方法deductBalanceById()上的@PutMapping路径错误，应为@PutMapping(“/{id}/deduction/{money}”)</li><li>根据id扣减余额方法deductBalanceById()里的@PathVariable缺少(“id”)、缺少（”money”）</li></ol><h2 id="3-黑马代码"><a href="#3-黑马代码" class="headerlink" title="3.黑马代码"></a>3.黑马代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;用户管理接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IUserService userService;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;新增用户&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserFormDTO userFormDTO)</span>&#123;<br>        <span class="hljs-comment">// 1.DTO转PO</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(userFormDTO,User.class);<br>        <span class="hljs-comment">// 2.新增</span><br>        userService.save(user);<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据id删除用户&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUserById</span><span class="hljs-params">(<span class="hljs-meta">@ApiParam(&quot;用户id&quot;)</span> <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;<br>        userService.removeById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;查询用户根据id&quot;)</span><br>    <span class="hljs-keyword">public</span> UserVO <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@ApiParam(&quot;用户id&quot;)</span><span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getById(id);<br>        <span class="hljs-keyword">return</span> BeanUtil.copyProperties(user,UserVO.class);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;根据id批量查询用户&quot;)</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> List&lt;UserVO&gt; <span class="hljs-title function_">listUsersByIds</span><span class="hljs-params">(<span class="hljs-meta">@ApiParam(&quot;用户id集合&quot;)</span><span class="hljs-meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>&#123;<br>        List&lt;User&gt; users = userService.listByIds(ids);<br>        <span class="hljs-keyword">return</span> BeanUtil.copyToList(users,UserVO.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-欣赏"><a href="#4-欣赏" class="headerlink" title="4.欣赏"></a>4.欣赏</h2><ol><li>新增用户addUser()方法使用了hutool工具包的BeanUtil.copyProperties(source,target.class)；方法将dto转为po，简化了代码。</li><li>根据id批量查询用户listUsersByIds()方法中使用了hutool工具包的BeanUtil.copyToList(source,targert.class);方法将po集合转为vo集合，简化了代码。</li><li>由于springboot不private final IUserService userService;</li></ol><h2 id="5-拓展"><a href="#5-拓展" class="headerlink" title="5.拓展"></a>5.拓展</h2><p><strong>@RestController注解和@Controller注解的区别</strong></p><p>共同点：都作用在Controller的类上。</p><p>区别：</p><p>@RestController注解是@ResponseBody注解和@Controller的组合注解。</p><p>当一个类被@RestController注解时，它的每个方法都会自动将返回对象序列化为JSON或XML格式，并将其直接写入到http的响应体，而不是跳转到视图(view)页面。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;gril&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中，访问/hello路径时，say()方法会直接返回字符串“gril”作为响应体。</p><p>@Controller注解是用于表示传统的Spring MVC控制器。一个被@Controller注解的类主要用于处理请求并返回一个视图(view)，而不是数据。如果想要在@Controller注解的类返回数据，需要在方法加上@ResponseBody注解</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;gril&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中，@ResponseBody注解使得say()方法返回的是字符串“gril”，而不是跳转到名为“gril”的视图(view)。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2025/04/21/python/"/>
      <url>/2025/04/21/python/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安全缺陷</title>
      <link href="/2025/04/10/%E5%AE%89%E5%85%A8%E7%BC%BA%E9%99%B7/"/>
      <url>/2025/04/10/%E5%AE%89%E5%85%A8%E7%BC%BA%E9%99%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="安全缺陷"><a href="#安全缺陷" class="headerlink" title="安全缺陷"></a>安全缺陷</h1><h2 id="1-Hibernate防止Sql注入方式"><a href="#1-Hibernate防止Sql注入方式" class="headerlink" title="1.Hibernate防止Sql注入方式"></a>1.Hibernate防止Sql注入方式</h2><p>代码引入例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.参数名称绑定(建议选择这种方式，这种方式可以动态拼接。)</span><br>Query query=session.createQuery(<span class="hljs-string">&quot;from User user where user.name=:name and user.age=:age&quot;</span>); <br>query.setParameter(<span class="hljs-string">&quot;name&quot;</span>,name); <br>query.setParameter(<span class="hljs-string">&quot;age&quot;</span>,age); <br>List&lt;User&gt; list = query.list(); <br><br><span class="hljs-comment">// 2.参数位置绑定</span><br>Query query=session.createQuery(<span class="hljs-string">&quot;from User user where user.name=?1 and user.age =?2 &quot;</span>); <br>query.setParameter(<span class="hljs-number">1</span>,name); <br>query.setParameter(<span class="hljs-number">2</span>,age); <br>List&lt;User&gt; list = query.list(); <br><br><span class="hljs-comment">// 这里介绍一下动态拼接(简单情况)</span><br>Query query=session.createQuery(<span class="hljs-string">&quot;from User user where user.name=:name&quot;</span>);<br><span class="hljs-keyword">if</span>(age !=<span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(age))&#123;<br>   query.setParameter(<span class="hljs-string">&quot;age&quot;</span>,age); <br>&#125; <br>List&lt;User&gt; list = query.list(); <br><br><span class="hljs-comment">// 这里介绍一下动态拼接(复杂情况)</span><br><br><br><span class="hljs-comment">// 这里是一个方法主要返回查询结果</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from User&quot;</span>;<br>Map&lt;String,Object&gt; paramMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>sql += whereSql(user,paramMap); <span class="hljs-comment">//user前端传递过来的</span><br><br>Query query=session.createQuery(sql);<br><span class="hljs-keyword">for</span>(Map.Entry&lt;String,Object&gt; entry : paramMap.entrySet())&#123;<br>   query.setParameter(entry.getKey(),entry.getValue());<br>&#125;<br><br><br><span class="hljs-comment">// 这里是whereSql(User user)方法,主要进行动态拼接sql</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">whereSql</span><span class="hljs-params">(User user,Map&lt;String,Object&gt; paramMap)</span>&#123;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; where 1=1 &quot;</span>;<br>   <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>)&#123;<br>      <span class="hljs-keyword">if</span>(!<span class="hljs-string">&quot;&quot;</span>.equals(user.name) &amp;&amp; user.name !=<span class="hljs-literal">null</span>)&#123;<br>         sql += <span class="hljs-string">&quot;and user.name=:name&quot;</span><br>         paramMap.put(<span class="hljs-string">&quot;name&quot;</span>,user.name);<br>      &#125;<br>      ...<br>   &#125;<br>   <span class="hljs-keyword">return</span> sql;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="1-1-could-not-extract-ResultSet-无效SQL语句"><a href="#1-1-could-not-extract-ResultSet-无效SQL语句" class="headerlink" title="1.1.could not extract ResultSet (无效SQL语句)"></a>1.1.could not extract ResultSet (无效SQL语句)</h3><p>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String hql=<span class="hljs-string">&quot;from TflowAuditCur t where t.dataId= ?1 and formCode=?2&quot;</span><br><span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> sessionFactory.getCurrentSession().createSQLQuery(hql);<br>query.setParameter(<span class="hljs-number">1</span>,dataId);<br>query.setParameter(<span class="hljs-number">2</span>,formCode);<br>List&lt;TflowAuditCur&gt; list = query.list(); <br></code></pre></td></tr></table></figure></p><p>错误原因:HQL和SQL混用(错误使用createSQLQuery())</p><blockquote><p>createSQLQuery() 用于执行原生 SQL，但你的 hql 变量实际是 HQL 语句（如 from TflowAuditCur），导致 Hibernate 尝试将 HQL 当作 SQL 解析，最终生成无效 SQL</p></blockquote><p>解决方式:使用HQL<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 使用 createQuery 代替 createSQLQuery</span><br><span class="hljs-type">String</span> <span class="hljs-variable">hql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;FROM TflowAuditCur t WHERE t.dataId = :dataId AND t.formCode = :formCode&quot;</span>;<br><span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> sessionFactory.getCurrentSession().createQuery(hql);<br><br><span class="hljs-comment">// 2. 使用命名参数（更清晰）</span><br>query.setParameter(<span class="hljs-string">&quot;dataId&quot;</span>, dataId);<br>query.setParameter(<span class="hljs-string">&quot;formCode&quot;</span>, formCode);<br><br><span class="hljs-comment">// 3. 获取结果</span><br>List&lt;TflowAuditCur&gt; list = query.list();<br></code></pre></td></tr></table></figure></p><h3 id="1-2-注意事项"><a href="#1-2-注意事项" class="headerlink" title="1.2.注意事项"></a>1.2.注意事项</h3><p>代码引入:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">String hql=<span class="hljs-string">&quot;from TflowAuditCur t where t.name like :name and t.formCode in :formCode&quot;</span><br><span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> sessionFactory.getCurrentSession().createSQLQuery(hql);<br><span class="hljs-comment">// like 要将百分号 % 拼接到参数里</span><br>query.setParameter(name,<span class="hljs-string">&#x27;%&#x27;</span>+name+<span class="hljs-string">&#x27;%&#x27;</span>);<br><br><span class="hljs-comment">// 如果前端传递的formCodes是&#x27;1&#x27;,&#x27;2&#x27;的时候要替换单引号</span><br>List&lt;String&gt; formCode = Arrays.asList(formCodes.replaceAll(<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).split(<span class="hljs-string">&quot;,&quot;</span>));<br><br><span class="hljs-comment">// in 要传递List集合</span><br>query.setParameter(formCode,formCode);<br>List&lt;TflowAuditCur&gt; list = query.list(); <br></code></pre></td></tr></table></figure></p><blockquote><p>Hibernate防止sql注入，涉及到like时，如果不按照上述处理当输入条件动态查询时会出现错误。<br>涉及到in时，不会报错。只是会查询不到数据，因为它将前端传递的整个数组作为一个参数进行查询。</p></blockquote><h3 id="1-3-其它事项"><a href="#1-3-其它事项" class="headerlink" title="1.3.其它事项"></a>1.3.其它事项</h3><p>如果涉及到分页的内容或者in(超过1000时)，可以走审计。在page类中定义正则（数字、逗号）即可。</p><h2 id="2-反射型XSS"><a href="#2-反射型XSS" class="headerlink" title="2.反射型XSS"></a>2.反射型XSS</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1.介绍"></a>2.1.介绍</h3><p>反射型XSS是指应用程序通过Web请求获取不可信赖的数据，并在未检验数据是否存在恶意代码的情况下，将其发送给用户。反射型XSS一般可以由攻击者构造带有恶意代码参数的url来实现，在构造的url地址被打开后，其中包含的恶意代码参数被浏览器解析和执行。这种攻击的特点是非持久化，必须用户点击包含恶意代码参数的链接时才会触发。</p><p>例如：下面的JSP代码片段的功能是从HTTP请求中读取输入的用户名（username）并显示到页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>...<br>姓名：&lt;%= name%&gt;<br>...<br></code></pre></td></tr></table></figure><p>如果name里有包含恶意代码，那么Web浏览器就会像显示HTTP响应那样执行该代码，应用程序将受到反射型XSS攻击。</p><h3 id="2-2-修复"><a href="#2-2-修复" class="headerlink" title="2.2.修复"></a>2.2.修复</h3><p>为了避免反射型XSS攻击，建议采用以下方式进行防御：</p><ol><li>对用户的输入进行合理的验证（如年龄只能是数字），对特殊字符（如’&lt;、&gt;、’、”、javascript’）等进行过滤。</li><li>根据数据将要置于HTML上下文中的不同位置（html标签、html属性、javascript脚本、css、url）,对所有不可信数据进行恰当的输出编码。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// HTML encode</span><br>ESAPI.encoder().encodeForHTML(inputData);<br><span class="hljs-comment">// HTML attribute encode</span><br>ESAPI.encoder().encodeForHTMLAttribute(inputData);<br><span class="hljs-comment">// JavaScript encode</span><br>ESAPI.encoder().encodeForJavaScript(inputData);<br><span class="hljs-comment">// Css encode</span><br>ESAPI.encoder().encodeForCSS(inputData);<br><span class="hljs-comment">// Url encode</span><br>ESAPI.encoder().encodeForURL(inputData);<br></code></pre></td></tr></table></figure><ol><li>设置HttpOnly属性，避免攻击者利用跨站脚本漏洞进行Cookie劫持攻击。在Java EE中，给Cookie添加HttpOnly的代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setHeader(<span class="hljs-string">&quot;Set-Cookie&quot;</span>,<span class="hljs-string">&quot;cookiename=cookievalue;path=/;Domain=domainvaule;Max-age=seconds;HttpOnly&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Idea知识库</title>
      <link href="/2025/04/07/Idea%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
      <url>/2025/04/07/Idea%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Idea知识库"><a href="#Idea知识库" class="headerlink" title="Idea知识库"></a>Idea知识库</h1><h2 id="1-Project-Structure"><a href="#1-Project-Structure" class="headerlink" title="1.Project Structure"></a>1.Project Structure</h2><ul><li>Project: 配置 项目名称、SDK(Jdk)、语言级别(选择与Jdk一致的版本)、编译器输出路径</li><li>Modules: 配置模块，包括源代码目录(Sources)、编译路径(Path)、依赖</li><li>Libraries: 管理项目中使用的库，可以添加本地或者网络的jar包，也可以进行排除或删除操作</li><li>Facets: 配置项目中使用的框架，如Spring或者Hibernate</li><li>Artifacts: 定义模块的打包方式，如jar、war</li></ul><h2 id="2-问题解决"><a href="#2-问题解决" class="headerlink" title="2.问题解决"></a>2.问题解决</h2><h3 id="2-1Idea代码打不了断点，注释可以打断点"><a href="#2-1Idea代码打不了断点，注释可以打断点" class="headerlink" title="2.1Idea代码打不了断点，注释可以打断点"></a>2.1Idea代码打不了断点，注释可以打断点</h3><p>原因:当前启动项目代码与现在代码不一致<br>解决方式:先停掉程序，然后再打断点。（如果是JavaWeb老项目，需要删除out目录再运行程序）</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo语法</title>
      <link href="/2025/03/26/Hexo%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/03/26/Hexo%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo语法"><a href="#Hexo语法" class="headerlink" title="Hexo语法"></a>Hexo语法</h1><h2 id="创建md文件"><a href="#创建md文件" class="headerlink" title="创建md文件"></a>创建md文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post 标题名<br></code></pre></td></tr></table></figure><h2 id="清理缓存并启动服务"><a href="#清理缓存并启动服务" class="headerlink" title="清理缓存并启动服务"></a>清理缓存并启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo cl;hexo s<br></code></pre></td></tr></table></figure><h2 id="清理缓存并推送远程"><a href="#清理缓存并推送远程" class="headerlink" title="清理缓存并推送远程"></a>清理缓存并推送远程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo cl;hexo d<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2025/03/24/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/03/24/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="1-标题语法"><a href="#1-标题语法" class="headerlink" title="1.标题语法"></a>1.标题语法</h2><p>一级标题：# 一级标题<br>二级标题：## 二级标题<br>三级标题：### 三级标题<br>以此类推<br>…</p><h2 id="2-文字语法"><a href="#2-文字语法" class="headerlink" title="2.文字语法"></a>2.文字语法</h2><p>正文：文字<br>斜体：</p><h2 id="3-提示框语法"><a href="#3-提示框语法" class="headerlink" title="3.提示框语法"></a>3.提示框语法</h2><p>提示框：&gt; 文本</p><blockquote><p>这里是提示框文本</p></blockquote><h2 id="4-图片语法"><a href="#4-图片语法" class="headerlink" title="4.图片语法"></a>4.图片语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">![图片描述](/img/)<br></code></pre></td></tr></table></figure><h2 id="5-表格语法"><a href="#5-表格语法" class="headerlink" title="5.表格语法"></a>5.表格语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">表头1|表头2<br>-|-<br>正文1|正文2<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>表头1</th><th>表头2</th></tr></thead><tbody><tr><td>正文1</td><td>正文2</td></tr></tbody></table></div><h2 id="6-有序语法"><a href="#6-有序语法" class="headerlink" title="6.有序语法"></a>6.有序语法</h2><p>数字.空格 内容 </p><h2 id="7-无序语法"><a href="#7-无序语法" class="headerlink" title="7.无序语法"></a>7.无序语法</h2><p>-空格 内容<br><div class="note default simple"><p>hhhh</p></div></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2025/03/21/Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/21/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="0-学习视频"><a href="#0-学习视频" class="headerlink" title="0.学习视频"></a>0.学习视频</h2><div align=center class="aspect-ratio">    <iframe src="https://player.bilibili.com/player.html?isOutside=true&aid=1806446513&bvid=BV1gb42177hm&cid=25705251969&p=1&autoplay=0"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div><h2 id="1-Jdk和Jre区别"><a href="#1-Jdk和Jre区别" class="headerlink" title="1.Jdk和Jre区别"></a>1.Jdk和Jre区别</h2><p><img src="/img/Jdk.png" alt="Jdk和Jre区别"></p><h2 id="为什么要配置环境变量？"><a href="#为什么要配置环境变量？" class="headerlink" title="为什么要配置环境变量？"></a>为什么要配置环境变量？</h2><p>配置完环境变量，可以在任何位置运行Java命令。</p><blockquote><p>主要设置Java_Home和将Jdk的bin目录配置到系统的Path目录<br>较新的Jdk，安装完会自动配置环境变量</p></blockquote><h2 id="2-Java的跨平台原理"><a href="#2-Java的跨平台原理" class="headerlink" title="2.Java的跨平台原理"></a>2.Java的跨平台原理</h2><p>一次编译、处处执行<br><img src="/img/javac.png" alt="Java的跨平台原理"></p><h2 id="3-Java的项目的代码结构"><a href="#3-Java的项目的代码结构" class="headerlink" title="3.Java的项目的代码结构"></a>3.Java的项目的代码结构</h2><p>Project-Module-Package-Class<br><img src="/img/Project.png" alt="Java的项目的代码结构"></p><h2 id="4-常用快捷键"><a href="#4-常用快捷键" class="headerlink" title="4.常用快捷键"></a>4.常用快捷键</h2><!-- 箭头网站 --><!-- https://symbl.cc/cn/2193/ --><div class="table-container"><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl+D</td><td>复制当前行到下一行</td></tr><tr><td>Ctrl+Y</td><td>删除当前行</td></tr><tr><td>Ctrl+Alt+L</td><td>格式化代码</td></tr><tr><td>Alt+Shift+↑</td><td>上移当前代码</td></tr><tr><td>Alt+Shift+↓</td><td>上移当前代码</td></tr><tr><td>Ctrl+/</td><td>注释</td></tr><tr><td>Ctrl+Shift+/</td><td>注释</td></tr></tbody></table></div><h2 id="5-Idea中模块操作"><a href="#5-Idea中模块操作" class="headerlink" title="5.Idea中模块操作"></a>5.Idea中模块操作</h2><h3 id="5-1-修改模块"><a href="#5-1-修改模块" class="headerlink" title="5.1.修改模块"></a>5.1.修改模块</h3><p>选择模块然后右键，Refactor -&gt; Rename -&gt; Rename module and directory</p><h3 id="5-2-导入模块"><a href="#5-2-导入模块" class="headerlink" title="5.2.导入模块"></a>5.2.导入模块</h3><ol><li>复制模块然后粘贴到Project里（此时没有进行关联）</li><li>File -&gt; New -&gt; Module from Existing Sources… 然后找到要导入的模块(一顿操作点击即可overwrite)</li><li>配置Jdk -&gt; Setup Sdk</li><li>如果爆红就重启idea</li></ol><h2 id="6-注释"><a href="#6-注释" class="headerlink" title="6.注释"></a>6.注释</h2><ol><li>单行注释：// 用于方法内部</li><li>多行注释：/<em> </em>/ 用于方法内部</li><li>文档注释：/<em>* </em>/ 多用于类和方法上</li></ol><h2 id="7-类型转换"><a href="#7-类型转换" class="headerlink" title="7.类型转换"></a>7.类型转换</h2><p>浮点型转为整数型，去掉小数，直接转换。</p><h2 id="8-表达式的自动类型提升"><a href="#8-表达式的自动类型提升" class="headerlink" title="8.表达式的自动类型提升"></a>8.表达式的自动类型提升</h2><p>在表达式中，小范围类型的变量，会自动转换成表达式中较大范围的类型，再参与运算。</p><blockquote><p>表达式的最终结果类型由表达式中的最高类型决定。<br>在表达式中，byte、short、char是直接转成int类型参与运算的。</p></blockquote><h2 id="9-号在Java中的特殊用途"><a href="#9-号在Java中的特殊用途" class="headerlink" title="9.+号在Java中的特殊用途"></a>9.+号在Java中的特殊用途</h2><ul><li>“+”有些时候可以做连接符</li><li>“+”与字符串运算的时候用作连接符，其结果依然是个字符串</li></ul><blockquote><p>如何识别”+”是做运算还是连接符？<br>能算则算，不能算就连接</p></blockquote><h2 id="10-switch"><a href="#10-switch" class="headerlink" title="10.switch"></a>10.switch</h2><h3 id="10-1-swith注意事项"><a href="#10-1-swith注意事项" class="headerlink" title="10.1.swith注意事项"></a>10.1.swith注意事项</h3><p>switch语法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>:<br>        执行代码。。。;<br>        <span class="hljs-keyword">break</span>;<br>     <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br>        执行代码。。。;<br>        <span class="hljs-keyword">break</span>;<br>     <span class="hljs-keyword">case</span> 值<span class="hljs-number">3</span>:<br>        执行代码。。。;<br>        <span class="hljs-keyword">break</span>;<br>    ...<br>    <span class="hljs-keyword">default</span>:<br>        执行代码。。。;<br>&#125;<br></code></pre></td></tr></table></figure></p><ul><li>表达式只能是byte、short、int、char,JDK5开始支持枚举，JDK7开始支持String，不支持double、float、long。</li><li>case给出的值不允许重复，且只能是常量，不能是变量。</li><li>正常使用switch时，不要忘记写break，否则会出现穿透现象。</li></ul><h3 id="10-2-switch穿透现象"><a href="#10-2-switch穿透现象" class="headerlink" title="10.2.switch穿透现象"></a>10.2.switch穿透现象</h3><p>存在多个case分支执行代码一致时，只需在一个case里写入代码。其它case通过穿透性质，穿透到该case块即可。可以简化代码。</p><h2 id="11-数组的定义：动态初始化数组"><a href="#11-数组的定义：动态初始化数组" class="headerlink" title="11.数组的定义：动态初始化数组"></a>11.数组的定义：动态初始化数组</h2><ul><li>定义数组时，先不存入具体的元素值，只确定数组存储的数据类型和数组的长度<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 数组名 = <span class="hljs-keyword">new</span> 数据类型[长度];<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>]; <br></code></pre></td></tr></table></figure>动态初始化数组元素默认值规则:</li></ul><table>  <tr>    <th>数据类型</th>    <th>明细</th>    <th>默认值</th>  </tr>  <tr>    <td rowspan="3">基本类型</td>    <td>byte、short、char、int、long</td>    <td>0</td>  </tr>  <tr>    <td>float_double</td>    <td>0.0</td>  </tr>  <tr>    <td>boolean</td>    <td>false</td>  </tr>  <tr>    <td rowspan="1">引用类型</td>    <td>类、接口、数组、String</td>    <td>null</td>  </tr></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
